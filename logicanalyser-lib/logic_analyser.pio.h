// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// slow_in //
// ------- //

#define slow_in_wrap_target 2
#define slow_in_wrap 9

static const uint16_t slow_in_program_instructions[] = {
    0x200f, //  0: wait   0 gpio, 15                 
    0x208f, //  1: wait   1 gpio, 15                 
            //     .wrap_target
    0x4008, //  2: in     pins, 8                    
    0xe033, //  3: set    x, 19                      
    0xb442, //  4: nop                           [20]
    0xb442, //  5: nop                           [20]
    0xb442, //  6: nop                           [20]
    0xb442, //  7: nop                           [20]
    0xb442, //  8: nop                           [20]
    0x0044, //  9: jmp    x--, 4                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program slow_in_program = {
    .instructions = slow_in_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config slow_in_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + slow_in_wrap_target, offset + slow_in_wrap);
    return c;
}
#endif

// ----------- //
// square_wave //
// ----------- //

#define square_wave_wrap_target 0
#define square_wave_wrap 3

static const uint16_t square_wave_program_instructions[] = {
            //     .wrap_target
    0xaa42, //  0: nop                           [10]
    0xe001, //  1: set    pins, 1                    
    0xaa42, //  2: nop                           [10]
    0xe000, //  3: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program square_wave_program = {
    .instructions = square_wave_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config square_wave_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + square_wave_wrap_target, offset + square_wave_wrap);
    return c;
}
#endif

// ----- //
// count //
// ----- //

#define count_wrap_target 1
#define count_wrap 3

static const uint16_t count_program_instructions[] = {
    0x80a0, //  0: pull   block                      
            //     .wrap_target
    0xa027, //  1: mov    x, osr                     
    0xa001, //  2: mov    pins, x                    
    0x0042, //  3: jmp    x--, 2                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program count_program = {
    .instructions = count_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config count_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + count_wrap_target, offset + count_wrap);
    return c;
}
#endif

// ------ //
// random //
// ------ //

#define random_wrap_target 0
#define random_wrap 1

static const uint16_t random_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6008, //  1: out    pins, 8                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program random_program = {
    .instructions = random_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config random_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + random_wrap_target, offset + random_wrap);
    return c;
}
#endif

